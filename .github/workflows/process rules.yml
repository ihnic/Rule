name: Process Rules

# 触发条件
on:
  push:
    branches:
      - main
    paths:
      - 'custom/*.txt'
  pull_request:
    branches:
      - main
    paths:
      - 'custom/*.txt'
  workflow_dispatch:
    inputs:
      remove_comments:
        description: 'Remove comments and empty lines from output files (true/false)'
        required: false
        default: 'false'

# 环境变量
env:
  REMOVE_COMMENTS: ${{ github.event.inputs.remove_comments || 'true' }}

# 作业定义
jobs:
  process-files:
    name: Process TXT Files
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：检出代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # 步骤 2：调试输入文件
      - name: Debug Input Files
        run: |
          echo "Custom directory contents:"
          ls -l custom/ || echo "No files in custom/"
          echo "Input file contents:"
          if ls custom/*.txt >/dev/null 2>&1; then
            cat custom/*.txt
          else
            echo "No txt files found"
          fi
          echo "REMOVE_COMMENTS=$REMOVE_COMMENTS"

      # 步骤 3：处理 TXT 文件
      - name: Process TXT Files
        run: |
          # 创建输出目录
          mkdir -p mihomo mosdns surge

          # 遍历 custom/ 目录下的所有 .txt 文件
          for file in custom/*.txt; do
            [ -f "$file" ] || continue
            echo "Processing $file"
            base_filename=$(basename "$file" .txt)
            # 创建临时文件
            temp_mihomo=$(mktemp)
            temp_mosdns=$(mktemp)
            temp_surge=$(mktemp)

            # 逐行读取输入文件
            while IFS= read -r line || [ -n "$line" ]; do
              # 去除行首尾空白字符并压缩多余空格
              line=$(echo "$line" | tr -s '[:space:]' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              # 处理空行或注释行
              if [[ -z "$line" || "$line" =~ ^#.* ]]; then
                if [[ "$REMOVE_COMMENTS" != "true" ]]; then
                  echo "$line" >> "$temp_mihomo"
                  echo "$line" >> "$temp_mosdns"
                  echo "$line" >> "$temp_surge"
                fi
                continue
              fi

              # 提取规则类型和内容
              if [[ "$line" =~ ^(DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|DOMAIN-REGEX),([^[:space:]]+) ]]; then
                rule_type="${BASH_REMATCH[1]}"
                content="${BASH_REMATCH[2]}"
                # mihomo：保持原格式
                echo "$line" >> "$temp_mihomo"
                # mosdns：根据规则类型转换
                case "$rule_type" in
                  DOMAIN)
                    echo "full:$content" >> "$temp_mosdns"
                    ;;
                  DOMAIN-SUFFIX)
                    echo "domain:$content" >> "$temp_mosdns"
                    ;;
                  DOMAIN-KEYWORD)
                    echo "keyword:$content" >> "$temp_mosdns"
                    ;;
                  DOMAIN-REGEX)
                    echo "regexp:$content" >> "$temp_mosdns"
                    ;;
                esac
                # surge：保持原格式
                echo "$line" >> "$temp_surge"
              elif [[ "$line" =~ ^(domain|full|keyword|regexp):([^[:space:]]+) ]]; then
                rule_type="${BASH_REMATCH[1]}"
                content="${BASH_REMATCH[2]}"
                # mihomo：转换为对应格式
                case "$rule_type" in
                  domain)
                    echo "DOMAIN-SUFFIX,$content" >> "$temp_mihomo"
                    ;;
                  full)
                    echo "DOMAIN,$content" >> "$temp_mihomo"
                    ;;
                  keyword)
                    echo "DOMAIN-KEYWORD,$content" >> "$temp_mihomo"
                    ;;
                  regexp)
                    echo "DOMAIN-REGEX,$content" >> "$temp_mihomo"
                    ;;
                esac
                # mosdns：保持原格式
                echo "$line" >> "$temp_mosdns"
                # surge：转换为对应格式
                case "$rule_type" in
                  domain)
                    echo "DOMAIN-SUFFIX,$content" >> "$temp_surge"
                    ;;
                  full)
                    echo "DOMAIN,$content" >> "$temp_surge"
                    ;;
                  keyword)
                    echo "DOMAIN-KEYWORD,$content" >> "$temp_surge"
                    ;;
                  regexp)
                    echo "DOMAIN-REGEX,$content" >> "$temp_surge"
                    ;;
                esac
              else
                # 其他格式直接写入（保持不变）
                echo "$line" >> "$temp_mihomo"
                echo "$line" >> "$temp_mosdns"
                echo "$line" >> "$temp_surge"
              fi
            done < "$file"

            # 移动临时文件到输出目录
            mv "$temp_mihomo" "mihomo/$base_filename.list"
            mv "$temp_mosdns" "mosdns/$base_filename.txt"
            mv "$temp_surge" "surge/$base_filename.list"

            # 打印输出文件内容以便调试
            echo "Mihomo output: mihomo/$base_filename.list"
            cat "mihomo/$base_filename.list"
            echo "Mosdns output: mosdns/$base_filename.txt"
            cat "mosdns/$base_filename.txt"
            echo "Surge output: surge/$base_filename.list"
            cat "surge/$base_filename.list"
          done

      - name: Commit Changes
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add mihomo/*.list mosdns/*.txt surge/*.list || echo "No files to add"
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Process TXT files (comments: $REMOVE_COMMENTS) - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push || { echo "Failed to push changes"; exit 1; }
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
