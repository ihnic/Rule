# 
name: Process Rules

# 触发条件
on:
  push:
    branches:
      - main
    paths:
      - 'custom/*.txt'  # 当 custom/ 目录下的 .txt 文件发生变更时触发
  pull_request:
    branches:
      - main
    paths:
      - 'custom/*.txt'  # 当提交到 main 分支的 PR 涉及 custom/*.txt 变更时触发
  workflow_dispatch:  # 支持手动触发工作流

# 作业定义
jobs:
  process-files:
    name: Process TXT Files  # 作业名称：处理 TXT 文件
    runs-on: ubuntu-latest   # 运行环境：最新的 Ubuntu 虚拟机

    steps:
      # 步骤 1：检出代码
      - name: Checkout Code
        uses: actions/checkout@v4  # 使用 actions/checkout@v4 检出仓库代码

      # 步骤 2：调试输入文件
      - name: Debug Input Files
        run: |
          echo "Custom directory contents:"
          ls -l custom/ || echo "No files in custom/"  # 列出 custom/ 目录内容，确认是否存在 .txt 文件
          echo "Input file contents:"
          cat custom/*.txt || echo "No txt files found"  # 显示 custom/*.txt 文件内容，若无文件则提示

      # 步骤 3：处理 TXT 文件
      - name: Process TXT Files
        run: |
          # 创建输出目录
          mkdir -p mihomo mosdns surge  # 确保 mihomo/、mosdns/ 和 surge/ 目录存在

          # 遍历 custom/ 目录下的所有 .txt 文件
          for file in custom/*.txt; do
            [ -f "$file" ] || continue  # 如果文件不存在，跳过
            echo "Processing $file"     # 打印当前处理的文件名
            base_filename=$(basename "$file" .txt)  # 提取文件名（去除 .txt 扩展名）
            # 为每个输出目标创建临时文件
            temp_mihomo=$(mktemp)
            temp_mosdns=$(mktemp)
            temp_surge=$(mktemp)
            # 初始化各目标的前缀
            prefix_mihomo=""
            prefix_mosdns=""
            prefix_surge=""
            # 逐行读取输入文件
            while IFS= read -r line || [ -n "$line" ]; do
              # 去除行首尾空白字符并压缩多余空格
              line=$(echo "$line" | tr -s '[:space:]' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              # 处理空行或注释行
              if [[ -z "$line" || "$line" =~ ^#.* ]]; then
                # 根据注释设置前缀
                [[ "$line" =~ ^#域匹配.* ]] && {
                  prefix_mihomo="DOMAIN-SUFFIX,"  # mihomo：域匹配使用 DOMAIN-SUFFIX,
                  prefix_mosdns="domain:"         # mosdns：域匹配使用 domain:
                  prefix_surge="DOMAIN-SUFFIX,"   # surge：域匹配使用 DOMAIN-SUFFIX,
                }
                [[ "$line" =~ ^#完整匹配.* ]] && {
                  prefix_mihomo="DOMAIN,"         # mihomo：完整匹配使用 DOMAIN,
                  prefix_mosdns="full:"           # mosdns：完整匹配使用 full:
                  prefix_surge="DOMAIN,"          # surge：完整匹配使用 DOMAIN,
                }
                [[ "$line" =~ ^#关键字匹配.* ]] && {
                  prefix_mihomo="DOMAIN-KEYWORD," # mihomo：关键字匹配使用 DOMAIN-KEYWORD,
                  prefix_mosdns="keyword:"        # mosdns：关键字匹配使用 keyword:
                  prefix_surge="DOMAIN-KEYWORD,"  # surge：关键字匹配使用 DOMAIN-KEYWORD,
                }
                # 将注释行写入所有临时文件
                echo "$line" >> "$temp_mihomo"
                echo "$line" >> "$temp_mosdns"
                echo "$line" >> "$temp_surge"
                continue
              fi
              # 处理 mihomo 输出
              if [[ "$line" =~ ^(DOMAIN-SUFFIX,|DOMAIN,|DOMAIN-KEYWORD,).* ]]; then
                echo "$line" >> "$temp_mihomo"  # 如果已有 mihomo 前缀，保持不变
              elif [[ -n "$prefix_mihomo" ]]; then
                echo "${prefix_mihomo}${line}" >> "$temp_mihomo"  # 添加 mihomo 前缀
              else
                echo "$line" >> "$temp_mihomo"  # 无前缀时直接写入
              fi
              # 处理 mosdns 输出
              if [[ "$line" =~ ^(domain:|full:|keyword:).* ]]; then
                echo "$line" >> "$temp_mosdns"  # 如果已有 mosdns 前缀，保持不变
              elif [[ -n "$prefix_mosdns" ]]; then
                echo "${prefix_mosdns}${line}" >> "$temp_mosdns"  # 添加 mosdns 前缀
              else
                echo "$line" >> "$temp_mosdns"  # 无前缀时直接写入
              fi
              # 处理 surge 输出
              if [[ "$line" =~ ^(DOMAIN-SUFFIX,|DOMAIN,|DOMAIN-KEYWORD,).* ]]; then
                echo "$line" >> "$temp_surge"  # 如果已有 surge 前缀，保持不变
              elif [[ -n "$prefix_surge" ]]; then
                echo "${prefix_surge}${line}" >> "$temp_surge"  # 添加 surge 前缀
              else
                echo "$line" >> "$temp_surge"  # 无前缀时直接写入
              fi
            done < "$file"
            # 将临时文件移动到输出目录
            mv "$temp_mihomo" "mihomo/$base_filename.list"  # mihomo 输出为 .list 文件
            mv "$temp_mosdns" "mosdns/$base_filename.txt"   # mosdns 输出为 .txt 文件
            mv "$temp_surge" "surge/$base_filename.list"   # surge 输出为 .list 文件
            # 打印输出文件内容以便调试
            echo "Mihomo output: mihomo/$base_filename.list"
            cat "mihomo/$base_filename.list"
            echo "Mosdns output: mosdns/$base_filename.txt"
            cat "mosdns/$base_filename.txt"
            echo "Surge output: surge/$base_filename.list"
            cat "surge/$base_filename.list"
          done

      # 步骤 4：提交更改
      - name: Commit Changes
        run: |
          # 配置 Git 用户信息
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          # 添加所有输出文件
          git add mihomo/*.list mosdns/*.txt surge/*.list
          # 提交更改，若无变更则打印提示
          git commit -m "Process TXT files to mihomo, mosdns, and surge - $(date -u +'%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
          # 推送到仓库
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GITHUB_TOKEN 进行身份验证