name: Update Rules

on:
  push:
    paths:
      - 'rules.txt'
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 0:00 运行
  workflow_dispatch:

jobs:
  update-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests==2.28.1
          if [ $? -ne 0 ]; then
            echo "安装依赖失败"
            exit 1
          fi

      - name: Process rules
        run: |
          python - <<EOF
          import os
          import requests
          from collections import OrderedDict, defaultdict
          from pathlib import Path
          from concurrent.futures import ThreadPoolExecutor

          # 创建输出目录
          mosdns_dir = Path("mosdns")
          mihomo_dir = Path("mihomo")
          surge_dir = Path("surge")
          mosdns_dir.mkdir(exist_ok=True)
          mihomo_dir.mkdir(exist_ok=True)
          surge_dir.mkdir(exist_ok=True)

          # 读取 rules.txt
          rules_by_name = defaultdict(list)
          try:
              with open('rules.txt', 'r') as f:
                  for line_number, line in enumerate(f, 1):
                      stripped_line = line.strip()
                      if not stripped_line:
                          print(f"跳过空行（行 {line_number}）")
                          continue
                      try:
                          name, url = stripped_line.split(' ', 1)
                          rules_by_name[name].append(url)
                      except ValueError:
                          print(f"rules.txt 格式错误（行 {line_number}）：{stripped_line}")
                          continue
          except FileNotFoundError:
              print("错误：rules.txt 未找到")
              exit(1)

          # 定义优先前缀
          PREFERRED_PREFIXES = {'domain:', 'full:', 'keyword:', 'regexp:'}

          # 定义需要排除的 Mosdns 规则前缀
          EXCLUDED_MOSDNS_PREFIXES = {'IP-CIDR', 'PROCESS-NAME', 'IP-ASN', 'IP-CIDR6'}

          # 并行下载 URL 内容
          def fetch_url(url):
              try:
                  response = requests.get(url, timeout=15)
                  response.raise_for_status()
                  return response.text
              except requests.RequestException as e:
                  print(f"无法获取 {url}：{e}")
                  return ""

          for name, urls in rules_by_name.items():
              print(f"处理规则集：{name}")
              # 初始化输出文件
              mosdns_file = mosdns_dir / f"{name}.txt"
              mihomo_file = mihomo_dir / f"{name}.list"
              surge_file = surge_dir / f"{name}.list"
              mosdns_rules = OrderedDict()
              mihomo_rules = OrderedDict()
              surge_rules = OrderedDict()

              # 并行获取 URL 内容
              with ThreadPoolExecutor(max_workers=5) as executor:
                  contents = list(executor.map(fetch_url, urls))

              for url, content in zip(urls, contents):
                  if not content:
                      continue
                  for line in content.splitlines():
                      stripped_line = line.strip()
                      if not stripped_line or stripped_line.startswith('#'):
                          print(f"跳过注释/空行（{url}）：{stripped_line}")
                          continue

                      # 转换为标准格式
                      modified_line = stripped_line.replace('DOMAIN-SUFFIX,', 'domain:') \
                                                  .replace('DOMAIN,', 'full:') \
                                                  .replace('DOMAIN-KEYWORD,', 'keyword:') \
                                                  .replace('DOMAIN-REGEX,', 'regexp:') \
                                                  .strip()
                      if not modified_line:
                          continue

                      # 提取核心内容（去掉前缀）
                      core_content = modified_line
                      for prefix in PREFERRED_PREFIXES:
                          if modified_line.startswith(prefix):
                              core_content = modified_line[len(prefix):].strip()
                              break
                      if not core_content:
                          print(f"无效规则（{url}）：{modified_line}")
                          continue

                      # 处理 Mosdns 规则
                      # 检查是否包含需要排除的前缀
                      if any(modified_line.startswith(prefix) for prefix in EXCLUDED_MOSDNS_PREFIXES):
                          print(f"跳过 Mosdns 排除的规则（{url}）：{modified_line}")
                          continue
                      if core_content not in mosdns_rules:
                          mosdns_rules[core_content] = modified_line
                      elif any(modified_line.startswith(p) for p in PREFERRED_PREFIXES) and \
                           not any(mosdns_rules[core_content].startswith(p) for p in PREFERRED_PREFIXES):
                          mosdns_rules[core_content] = modified_line

                      # 处理 Mihomo 规则
                      mihomo_line = modified_line
                      if modified_line.startswith('domain:'):
                          mihomo_line = f"DOMAIN-SUFFIX,{core_content}"
                      elif modified_line.startswith('full:'):
                          mihomo_line = f"DOMAIN,{core_content}"
                      elif modified_line.startswith('keyword:'):
                          mihomo_line = f"DOMAIN-KEYWORD,{core_content}"
                      elif modified_line.startswith('regexp:'):
                          mihomo_line = f"DOMAIN-REGEX,{core_content}"
                      if core_content not in mihomo_rules:
                          mihomo_rules[core_content] = mihomo_line
                      elif mihomo_line.startswith(('DOMAIN-SUFFIX,', 'DOMAIN,', 'DOMAIN-KEYWORD,', 'DOMAIN-REGEX,')):
                          mihomo_rules[core_content] = mihomo_line

                      # 处理 Surge 规则
                      surge_line = modified_line
                      if modified_line.startswith('domain:'):
                          surge_line = f"DOMAIN-SUFFIX,{core_content}"
                      elif modified_line.startswith('full:'):
                          surge_line = f"DOMAIN,{core_content}"
                      elif modified_line.startswith('keyword:'):
                          surge_line = f"DOMAIN-KEYWORD,{core_content}"
                      elif modified_line.startswith('regexp:'):
                          surge_line = f"DOMAIN-REGEX,{core_content}"
                      if core_content not in surge_rules:
                          surge_rules[core_content] = surge_line
                      elif surge_line.startswith(('DOMAIN-SUFFIX,', 'DOMAIN,', 'DOMAIN-KEYWORD,', 'DOMAIN-REGEX,')):
                          surge_rules[core_content] = surge_line

              # 验证规则
              if not mosdns_rules:
                  print(f"警告：{name} 没有生成有效规则")
                  continue

              # 写入 Mosdns 文件
              try:
                  with open(mosdns_file, 'w') as outfile:
                      for rule_line in mosdns_rules.values():
                          outfile.write(rule_line + '\n')
                  print(f"更新 {mosdns_file}，共 {len(mosdns_rules)} 条规则")
              except IOError as e:
                  print(f"写入 {mosdns_file} 失败：{e}")
                  exit(1)

              # 写入 Mihomo 文件
              try:
                  with open(mihomo_file, 'w') as outfile:
                      for rule_line in mihomo_rules.values():
                          outfile.write(rule_line + '\n')
                  print(f"更新 {mihomo_file}，共 {len(mihomo_rules)} 条规则")
              except IOError as e:
                  print(f"写入 {mihomo_file} 失败：{e}")
                  exit(1)

              # 写入 Surge 文件
              try:
                  with open(surge_file, 'w') as outfile:
                      for rule_line in surge_rules.values():
                          outfile.write(rule_line + '\n')
                  print(f"更新 {surge_file}，共 {len(surge_rules)} 条规则")
              except IOError as e:
                  print(f"写入 {surge_file} 失败：{e}")
                  exit(1)
          EOF

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add mosdns/*.txt mihomo/*.list surge/*.list
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
            exit 0
          else
            git commit -m "更新 mosdns、mihomo、surge 规则，基于 rules.txt - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
            if [ $? -ne 0 ]; then
              echo "推送变更失败"
              exit 1
            fi
          fi
