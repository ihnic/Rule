name: Update Rules

on:
  push:
    paths:
      - 'mosdns.txt'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests==2.28.1
          if [ $? -ne 0 ]; then
            echo "Failed to install dependencies"
            exit 1
          fi

      - name: Process rules
        run: |
          rm -rf mosdns/*.txt
          python - <<EOF
          import os
          import requests
          from collections import OrderedDict, defaultdict
          from pathlib import Path

          mosdns_dir = Path("mosdns")
          mosdns_dir.mkdir(exist_ok=True)

          rules_by_name = defaultdict(list)
          try:
              with open('mosdns.txt', 'r') as f:
                  for line in f:
                      stripped_line = line.strip()
                      if not stripped_line:
                          continue
                      try:
                          name, url = stripped_line.split(' ', 1)
                          rules_by_name[name].append(url)
                      except ValueError:
                          print(f"Invalid line format in mosdns.txt: {stripped_line}")
                          continue
          except FileNotFoundError:
              print("Error: mosdns.txt not found")
              exit(1)

          PREFERRED_PREFIXES = {'domain:', 'full:', 'keyword:', 'regexp:'}

          for name, urls in rules_by_name.items():
              output_file = mosdns_dir / f"{name}.txt"
              rules_dict = {}

              for i, url in enumerate(urls):
                  try:
                      response = requests.get(url, timeout=15)
                      response.raise_for_status()
                      content = response.text
                  except requests.RequestException as e:
                      print(f"Failed to fetch {url}: {e}")
                      content = ""

                  for line in content.splitlines():
                      stripped_line = line.strip()
                      if not stripped_line or stripped_line.startswith('#'):
                          continue
                      if 'IP-CIDR' in stripped_line or 'IP-CIDR6' in stripped_line:
                          continue

                      modified_line = stripped_line.replace('DOMAIN-SUFFIX,', 'domain:') \
                                                  .replace('DOMAIN,', 'full:') \
                                                  .replace('DOMAIN-KEYWORD,', 'keyword:') \
                                                  .replace('DOMAIN-REGEX,', 'regexp:') \
                                                  .strip()
                      if not modified_line:
                          continue

                      core_content = modified_line
                      for prefix in PREFERRED_PREFIXES:
                          if modified_line.startswith(prefix):
                              core_content = modified_line[len(prefix):].strip()
                              break

                      if core_content in rules_dict:
                          existing_rule = rules_dict[core_content]
                          if any(existing_rule.startswith(p) for p in PREFERRED_PREFIXES):
                              continue
                          if any(modified_line.startswith(p) for p in PREFERRED_PREFIXES):
                              rules_dict[core_content] = modified_line
                          else:
                              rules_dict[core_content] = modified_line
                      else:
                          rules_dict[core_content] = modified_line

              try:
                  with open(output_file, 'w') as outfile:
                      for rule_line in rules_dict.values():
                          outfile.write(rule_line + '\n')
                  print(f"Updated {output_file} with {len(rules_dict)} rules")
              except IOError as e:
                  print(f"Failed to write to {output_file}: {e}")
                  exit(1)
          EOF

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add mosdns/*.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Update rules from mosdns.txt - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
            if [ $? -ne 0 ]; then
              echo "Failed to push changes"
              exit 1
            fi
          fi
